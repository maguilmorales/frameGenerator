import React, { useRef, useEffect } from "react";
import { Canvas, useFrame, useLoader, useThree } from "@react-three/fiber";
import { Plane, OrbitControls, Instance, Instances } from "@react-three/drei";
import * as THREE from "three";
import { useControls } from "leva";
import { TextureLoader } from "three/src/loaders/TextureLoader";

import { DoubleSide } from "three";


function App() {
  function RoundedRect() {
    const { width, height, radius } = useControls({
      width: { value: 50, min: 0, max: 100, step: 1 },
      height: { value: 50, min: 0, max: 100, step: 1 },
      radius: { value: 20, min: 1, max: 30, step: 1 },
    });

    const roundedRectShape = new THREE.Shape();

    const x = 0;
    const y = 0;

    roundedRectShape.moveTo(x, y + radius);
    roundedRectShape.lineTo(x, y + height - radius);
    roundedRectShape.quadraticCurveTo(x, y + height, x + radius, y + height);
    roundedRectShape.lineTo(x + width - radius, y + height);
    roundedRectShape.quadraticCurveTo(
      x + width,
      y + height,
      x + width,
      y + height - radius
    );
    roundedRectShape.lineTo(x + width, y + radius);
    roundedRectShape.quadraticCurveTo(x + width, y, x + width - radius, y);
    roundedRectShape.lineTo(x + radius, y);
    roundedRectShape.quadraticCurveTo(x, y, x, y + radius);

    return roundedRectShape;
  }


  return (
    <Canvas camera={{ position: [90, 90, 100] }}>
      <OrbitControls enableDamping />
      <color attach="background" args={[backgroundColorFrame]} />
      <ambientLight intensity={1} />
      <Group position={[0, 0, 10]}>
          <RoundedLineShape width={20} height={25} radius={5} color={'white'}  />
          </Group>
    </Canvas>
  );
}
export default App;



 // const limit = 30
  // const update =  useRef(0);
  // const [version, setVersion] = useState(0)

  // function sleep(ms) {
  //   return new Promise(resolve => setTimeout(resolve, ms));
  // }

  // useFrame(async (state, delta) => {
  //   mesh.current.material.uniforms.u_time.value += delta;
  // });
  


  // useEffect(() => {


  //   console.log('version',version)
  //   const handleMeshRotation = async () => {
  //     // console.log('getElapsedTime',clock.getElapsedTime())
  //     const scale = 1 + Math.sin(clock.getElapsedTime() * 2) * 0.3;
  //     for (const _mesh of arrayOfMeshes) {
  //       await sleep(100)
  //       _mesh.current.rotation.z += 1
  //     }
  //     setVersion((prev) => prev + 1)
  //     return Promise.resolve()
  //   }
  //   handleMeshRotation()
  //   return () => {}
  // }, [version])


  {/* 
        <mesh
          ref={mesh8}
          position={[0, 0, 0]}
          rotation={[0, 0, 1.8]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[80, 80, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh9}
          position={[0, 0, 0]}
          rotation={[0, 0, 2]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[90, 90, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh10}
          position={[0, 0, 0]}
          rotation={[0, 0, 2.4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[100, 100, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh> */}
{/* 
        <mesh
          ref={mesh11}
          position={[0, 0, 0]}
          rotation={[0, 0, 2.6]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[110, 110, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh12}
          position={[0, 0, 0]}
          rotation={[0, 0, 2.8]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[120, 120, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh13}
          position={[0, 0, 0]}
          rotation={[0, 0, 3]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[130, 130, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientPink}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh14}
          position={[0, 0, 0]}
          rotation={[0, 0, 3.2]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[140, 140, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgAiSalesPurple}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh15}
          position={[0, 0, 0]}
          rotation={[0, 0, 3.4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[150, 150, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgSmileyLinePink}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh16}
          position={[0, 0, 0]}
          rotation={[0, 0, 3.6]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[160, 160, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgSmileyLinePink}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh17}
          position={[0, 0, 0]}
          rotation={[0, 0, 3.8]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[170, 170, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh18}
          position={[0, 0, 0]}
          rotation={[0, 0, 4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[180, 180, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgAiSalesPurple}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh19}
          position={[0, 0, 0]}
          rotation={[0, 0, 4.4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[190, 190, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

        <mesh
          ref={mesh20}
          position={[0, 0, 0]}
          rotation={[0, 0, 4.6]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[200, 200, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh> */}


        import React, { useEffect, useRef, useState, setScale } from "react";
import { useFrame, useLoader } from "@react-three/fiber";
import { Cylinder, OrbitControls, useHelper } from "@react-three/drei";
import * as THREE from "three";
import { TextureLoader } from "three/src/loaders/TextureLoader";
import fgGradientOrange from "../shaders/fg-gradientOrange.glsl";
import fgGradientPink from "../shaders/fg-gradientPink.glsl";
import fgLogo from "../shaders/fg-logo.glsl";
import fgSmileyLinePink from "../shaders/fg-smileyLinePink.glsl";
import fgSmileyLinePurple from "../shaders/fg-smileyLinePurple.glsl";
import fgAiSalesPurple from "../shaders/fg-text-aiSalesPurple.glsl";
import fgAiSalesPink from "../shaders/fg-text-aiSalesPink.glsl";
import fgGradientMap from "../shaders/fg-gradientMap.glsl";

import vertexShader from "../shaders/vertex.glsl";
import { BackSide, CylinderGeometry, DoubleSide } from "three";

export const AiSales = () => {
  const aiSalesPurple = useLoader(TextureLoader, "aiSalesPurple.jpg");
  const aiSalesPink = useLoader(TextureLoader, "aiSalesPink.jpg");
  const smileyLinePink = useLoader(TextureLoader, "smileyLinePink.jpg");
  const smileyLinePurple = useLoader(TextureLoader, "smileyLinePurple.jpg");
  const dpLogo = useLoader(TextureLoader, "dp-logo.jpg");
  const gradientMap = useLoader(TextureLoader, "gradientMap.png");

  const uniforms = {
    u_time: { value: 0.0 },
    u_resolution: {
      value: new THREE.Vector2(window.innerWidth, window.innerHeight),
    },
    u_color1: { value: new THREE.Color("#9643FF") },
    u_color2: { value: new THREE.Color("#F9008E") },
    u_color3: { value: new THREE.Color("#FF7719") },
    u_color4: { value: new THREE.Color("#9FFF90") },
    u_textureAiSalesPurple: { value: aiSalesPurple },
    u_textureAiSalesPink: { value: aiSalesPink },
    u_textureSmileyLinePink: { value: smileyLinePink },
    u_textureSmileyLinePurple: { value: smileyLinePurple },
    u_textureLogo: { value: dpLogo },
    u_textureGradientMap: { value: gradientMap },
  };

  const mesh = useRef(null);
  const mesh2 = useRef(null);
  const mesh3 = useRef(null);
  const mesh4 = useRef(null);
  const mesh5 = useRef(null);
  const mesh6 = useRef(null);
  const mesh7 = useRef(null);


  const arrayOfMeshes = [
    mesh,
    mesh2,
    mesh3,
    mesh4,
    mesh5,
    mesh6,
    mesh7,


  ];

  useFrame(({ clock,  }, delta) => {
    console.log('clock.elapsedTime', clock.elapsedTime)
    const scale = 1 + Math.sin(clock.elapsedTime * 2) * 0.3;
    arrayOfMeshes.forEach((_mesh, i) => {
      _mesh.current.material.uniforms.u_time.value += delta;
      _mesh.current.scale.set(scale, scale, scale);
      _mesh.current.rotation.z +=  Math.sin(clock.elapsedTime * 4) * Math.PI * 0.0009 * i;
    });
  });

 
  return (
    <>
      <OrbitControls enableDamping />
      <color attach="background" args={["#000000"]} />

      <group position={[15, 0, 0]}>
        <mesh
          ref={mesh}
          position={[0, 0, 0]}
          rotation={[0, 0, 0]}
          castShadow
          receiveShadow
        >
          <sphereGeometry attach="geometry" args={[10, 50, 50]} />
          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            transparent={true}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh2}
          position={[0, 0, 0]}
          rotation={[0, 0, 0.4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry args={[20, 20, 10, 60, 1, true]} />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgAiSalesPurple}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh3}
          position={[0, 0, 0]}
          rotation={[0, 0, 0.6]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[30, 30, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgSmileyLinePurple}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh4}
          position={[0, 0, 0]}
          rotation={[0, 0, 0.8]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[40, 40, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            side={DoubleSide}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            transparent={true}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh5}
          position={[0, 0, 0]}
          rotation={[0, 0, 1]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[50, 50, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh6}
          position={[0, 0, 0]}
          rotation={[0, 0, 1.4]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[60, 60, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgGradientMap}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
            shadowSide={BackSide}
            shadowMap={true} // Add this property
            shadowMapSize={new THREE.Vector2(1024, 1024)}
            castShadow={true}
            receiveShadow={true}
          />
        </mesh>

        <mesh
          ref={mesh7}
          position={[0, 0, 0]}
          rotation={[0, 0, 1.6]}
          castShadow
          receiveShadow
        >
          <cylinderGeometry
            attach="geometry"
            args={[70, 70, 10, 60, 1, true]}
          />

          <shaderMaterial
            uniforms={uniforms}
            fragmentShader={fgLogo}
            vertexShader={vertexShader}
            transparent={true}
            side={DoubleSide}
          />
        </mesh>

      </group>
    </>
  );
};
  // const meshTorus = useRef(null);
  // const meshBox = useRef(null);
  // const meshCircle = useRef(null);
  // const meshCircle2 = useRef(null);
  // const meshTorusKnot = useRef(null);
  // const meshTorus2 = useRef(null);
  // const meshTorus10 = useRef(null);
  // const meshPoints4 = useRef(null);
  // const meshCircle3 = useRef(null);
  // const meshTorusKnot2 = useRef(null);
  // const meshPoints3 = useRef(null);
  // const meshPoints = useRef();
  // const meshPoints2 = useRef();
  // const meshPoints10 = useRef();
  // const meshPoints20 = useRef();

//   useFrame((state, delta) => {
//     meshBox.current.material.uniforms.u_time.value += delta;
//     meshBox.current.rotation.x += delta;
//     meshBox.current.rotation.y += delta;
//     meshBox.current.rotation.z += delta;
//     meshTorusKnot.current.rotation.z += delta;
//     meshTorusKnot2.current.rotation.z += delta;
//     meshCircle.current.rotation.z += delta;
//     meshCircle2.current.rotation.z += delta;
//     meshCircle3.current.rotation.z += delta;
//     meshPoints3.current.rotation.x += delta;
//     meshPoints.current.rotation.x += delta;
//     meshPoints.current.rotation.y += delta;
//     meshPoints.current.rotation.z += delta;
//     meshPoints2.current.rotation.x -= delta;
//     meshPoints10.current.rotation.x -= delta;
//     meshPoints10.current.rotation.y -= delta;
//     meshPoints10.current.rotation.z -= delta;
//     meshPoints2.current.rotation.y -= delta;
//     meshPoints2.current.rotation.z -= delta;
//     meshPoints4.current.rotation.z -= delta;
//     meshTorus.current.rotation.x -= delta;
//     meshTorus.current.rotation.y -= delta;
//     meshTorus.current.rotation.z -= delta;
//     meshTorus2.current.rotation.x -= delta;
//     meshTorus2.current.rotation.y -= delta;
//     meshTorus2.current.rotation.z -= delta;
//     meshTorus10.current.rotation.z -= delta;
//     meshTorus10.current.rotation.x -= delta;
//     meshTorus10.current.rotation.y -= delta;
//     meshPoints10.current.rotation.z -= delta;
//     meshPoints20.current.rotation.z -= delta;
//   });

// const color = new THREE.Color('#9643FF')
//   return (

//     <>
//       <OrbitControls enableDamping />
//       <color attach="background" args={["#000000"]} />
//       <ambientLight intensity={1} />
//       <group position={[0, 10, 0]}>
//       <mesh ref={meshCircle3} position={[-20, 0, 0]}>
//       <circleGeometry args={[4, 50 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgGradientMap}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <mesh ref={meshTorusKnot2} position={[-10, 0, 0]}>
//       <torusKnotGeometry args={[2, 0.8, 100, 100 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgLogoCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints10} position={[10, 0, 0]}>
//         <sphereGeometry args={[4, 30, 30]} />
//         <pointsMaterial color={"#9FFF90"} size={0.1} />
//       </points>

//       <mesh ref={meshTorus10} position={[0, 0, 0]}>
//       <torusGeometry args={[2, 1, 100, 100 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgSmileyLinePink}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints4} position={[20, 0, 0]}>
//         <sphereGeometry args={[2, 10, 30]} />
//         <pointsMaterial color={"#9FFF90"} size={0.1} />
//       </points>
//       </group>
//       <group position={[0, 0, 0]}>
//       <mesh ref={meshCircle} position={[-20, 0, 0]}>
//       <circleGeometry args={[4, 50 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgGeometricShapesCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <mesh ref={meshBox} position={[-10, 0, 0]}>
//       <boxGeometry args={[4, 4, 4 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgLogoCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints20} position={[0, 0, 0]}>
//         <sphereGeometry args={[4, 30, 30]} />
//         <pointsMaterial color={"#9643FF"} size={0.1} />
//       </points>

//       <mesh ref={meshTorus} position={[10, 0, 0]}>
//       <torusGeometry args={[2, 1, 100, 100 ]} />
//       <meshNormalMaterial />
//       </mesh>

//       <points ref={meshPoints2} position={[20, 0, 0]}>
//         <sphereGeometry args={[4, 10, 30]} />
//         <pointsMaterial color={"#ffffff"} size={0.1} />
//       </points>
//       </group>
//       <group position={[0, 20, 0]}>
//       <mesh ref={meshCircle} position={[-20, 0, 0]}>
//       <circleGeometry args={[4, 50 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgGeometricShapesCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <mesh ref={meshBox} position={[-10, 0, 0]}>
//       <boxGeometry args={[4, 4, 4 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgLogoCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints} position={[0, 0, 0]}>
//         <sphereGeometry args={[4, 30, 30]} />
//         <pointsMaterial color={"#9643FF"} size={0.1} />
//       </points>

//       <mesh ref={meshTorus} position={[10, 0, 0]}>
//       <torusGeometry args={[2, 1, 100, 100 ]} />
//       <meshNormalMaterial />
//       </mesh>

//       <points ref={meshPoints2} position={[20, 0, 0]}>
//         <sphereGeometry args={[4, 10, 30]} />
//         <pointsMaterial color={"#ffffff"} size={0.1} />
//       </points>
//       </group>
//       <group position={[0, -10, 0]}>
//       <mesh ref={meshCircle} position={[-20, 0, 0]}>
//       <circleGeometry args={[4, 50 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgGeometricShapesCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <mesh ref={meshBox} position={[-10, 0, 0]}>
//       <boxGeometry args={[4, 4, 4 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgLogoCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints} position={[0, 0, 0]}>
//         <sphereGeometry args={[2, 30, 30]} />
//         <pointsMaterial color={"#F9008E"} size={0.1} />
//       </points>

//       <mesh ref={meshTorus} position={[10, 0, 0]}>
//       <torusGeometry args={[2, 1, 100, 100 ]} />
//       <meshNormalMaterial />
//       </mesh>

//       <points ref={meshPoints2} position={[20, 0, 0]}>
//         <sphereGeometry args={[4, 10, 30]} />
//         <pointsMaterial color={"#ffffff"} size={0.1} />
//       </points>
//       </group>
//       <group position={[0, -20, 0]}>
//       <mesh ref={meshCircle2} position={[-20, 0, 0]}>
//       <circleGeometry args={[4, 50 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgGradientMap}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <mesh ref={meshTorusKnot} position={[-10, 0, 0]}>
//       <torusKnotGeometry args={[2, 0.8, 100, 100 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgLogoCom}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints3} position={[10, 0, 0]}>
//         <sphereGeometry args={[4, 30, 30]} />
//         <pointsMaterial color={"#FF7719"} size={0.1} />
//       </points>

//       <mesh ref={meshTorus2} position={[0, 0, 0]}>
//       <torusGeometry args={[2, 1, 100, 100 ]} />
//       <shaderMaterial
//             uniforms={uniforms}
//             fragmentShader={fgSmileyLinePink}
//             vertexShader={vertexShader}
//           />
//       </mesh>

//       <points ref={meshPoints4} position={[20, 0, 0]}>
//         <sphereGeometry args={[2, 10, 30]} />
//         <pointsMaterial color={"#9FFF90"} size={0.1} />
//       </points>
//       </group>

//     </>
//   );
// };


 // const meshTorus = useRef(null);
  // const meshBox = useRef(null);
  // const meshCircle = useRef(null);
  // const meshCircle2 = useRef(null);
  // const meshTorusKnot = useRef(null);
  // const meshTorus2 = useRef(null);
  // const meshTorus10 = useRef(null);
  // const meshPoints4 = useRef(null);
  // const meshCircle3 = useRef(null);
  // const meshTorusKnot2 = useRef(null);
  // const meshPoints3 = useRef(null);
  // const meshPoints = useRef();
  // const meshPoints2 = useRef();
  // const meshPoints10 = useRef();
  // const meshPoints20 = useRef();

  //   useFrame((state, delta) => {
  //     meshBox.current.material.uniforms.u_time.value += delta;
  //     meshBox.current.rotation.x += delta;
  //     meshBox.current.rotation.y += delta;
  //     meshBox.current.rotation.z += delta;
  //     meshTorusKnot.current.rotation.z += delta;
  //     meshTorusKnot2.current.rotation.z += delta;
  //     meshCircle.current.rotation.z += delta;
  //     meshCircle2.current.rotation.z += delta;
  //     meshCircle3.current.rotation.z += delta;
  //     meshPoints3.current.rotation.x += delta;
  //     meshPoints.current.rotation.x += delta;
  //     meshPoints.current.rotation.y += delta;
  //     meshPoints.current.rotation.z += delta;
  //     meshPoints2.current.rotation.x -= delta;
  //     meshPoints10.current.rotation.x -= delta;
  //     meshPoints10.current.rotation.y -= delta;
  //     meshPoints10.current.rotation.z -= delta;
  //     meshPoints2.current.rotation.y -= delta;
  //     meshPoints2.current.rotation.z -= delta;
  //     meshPoints4.current.rotation.z -= delta;
  //     meshTorus.current.rotation.x -= delta;
  //     meshTorus.current.rotation.y -= delta;
  //     meshTorus.current.rotation.z -= delta;
  //     meshTorus2.current.rotation.x -= delta;
  //     meshTorus2.current.rotation.y -= delta;
  //     meshTorus2.current.rotation.z -= delta;
  //     meshTorus10.current.rotation.z -= delta;
  //     meshTorus10.current.rotation.x -= delta;
  //     meshTorus10.current.rotation.y -= delta;
  //     meshPoints10.current.rotation.z -= delta;
  //     meshPoints20.current.rotation.z -= delta;
  //   });

  // const color = new THREE.Color('#9643FF')
  //   return (

  //     <>
  //       <OrbitControls enableDamping />
  //       <color attach="background" args={["#000000"]} />
  //       <ambientLight intensity={1} />
  //       <group position={[0, 10, 0]}>
  //       <mesh ref={meshCircle3} position={[-20, 0, 0]}>
  //       <circleGeometry args={[4, 50 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgGradientMap}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <mesh ref={meshTorusKnot2} position={[-10, 0, 0]}>
  //       <torusKnotGeometry args={[2, 0.8, 100, 100 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgLogoCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints10} position={[10, 0, 0]}>
  //         <sphereGeometry args={[4, 30, 30]} />
  //         <pointsMaterial color={"#9FFF90"} size={0.1} />
  //       </points>

  //       <mesh ref={meshTorus10} position={[0, 0, 0]}>
  //       <torusGeometry args={[2, 1, 100, 100 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgSmileyLinePink}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints4} position={[20, 0, 0]}>
  //         <sphereGeometry args={[2, 10, 30]} />
  //         <pointsMaterial color={"#9FFF90"} size={0.1} />
  //       </points>
  //       </group>
  //       <group position={[0, 0, 0]}>
  //       <mesh ref={meshCircle} position={[-20, 0, 0]}>
  //       <circleGeometry args={[4, 50 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgGeometricShapesCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <mesh ref={meshBox} position={[-10, 0, 0]}>
  //       <boxGeometry args={[4, 4, 4 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgLogoCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints20} position={[0, 0, 0]}>
  //         <sphereGeometry args={[4, 30, 30]} />
  //         <pointsMaterial color={"#9643FF"} size={0.1} />
  //       </points>

  //       <mesh ref={meshTorus} position={[10, 0, 0]}>
  //       <torusGeometry args={[2, 1, 100, 100 ]} />
  //       <meshNormalMaterial />
  //       </mesh>

  //       <points ref={meshPoints2} position={[20, 0, 0]}>
  //         <sphereGeometry args={[4, 10, 30]} />
  //         <pointsMaterial color={"#ffffff"} size={0.1} />
  //       </points>
  //       </group>
  //       <group position={[0, 20, 0]}>
  //       <mesh ref={meshCircle} position={[-20, 0, 0]}>
  //       <circleGeometry args={[4, 50 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgGeometricShapesCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <mesh ref={meshBox} position={[-10, 0, 0]}>
  //       <boxGeometry args={[4, 4, 4 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgLogoCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints} position={[0, 0, 0]}>
  //         <sphereGeometry args={[4, 30, 30]} />
  //         <pointsMaterial color={"#9643FF"} size={0.1} />
  //       </points>

  //       <mesh ref={meshTorus} position={[10, 0, 0]}>
  //       <torusGeometry args={[2, 1, 100, 100 ]} />
  //       <meshNormalMaterial />
  //       </mesh>

  //       <points ref={meshPoints2} position={[20, 0, 0]}>
  //         <sphereGeometry args={[4, 10, 30]} />
  //         <pointsMaterial color={"#ffffff"} size={0.1} />
  //       </points>
  //       </group>
  //       <group position={[0, -10, 0]}>
  //       <mesh ref={meshCircle} position={[-20, 0, 0]}>
  //       <circleGeometry args={[4, 50 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgGeometricShapesCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <mesh ref={meshBox} position={[-10, 0, 0]}>
  //       <boxGeometry args={[4, 4, 4 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgLogoCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints} position={[0, 0, 0]}>
  //         <sphereGeometry args={[2, 30, 30]} />
  //         <pointsMaterial color={"#F9008E"} size={0.1} />
  //       </points>

  //       <mesh ref={meshTorus} position={[10, 0, 0]}>
  //       <torusGeometry args={[2, 1, 100, 100 ]} />
  //       <meshNormalMaterial />
  //       </mesh>

  //       <points ref={meshPoints2} position={[20, 0, 0]}>
  //         <sphereGeometry args={[4, 10, 30]} />
  //         <pointsMaterial color={"#ffffff"} size={0.1} />
  //       </points>
  //       </group>
  //       <group position={[0, -20, 0]}>
  //       <mesh ref={meshCircle2} position={[-20, 0, 0]}>
  //       <circleGeometry args={[4, 50 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgGradientMap}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <mesh ref={meshTorusKnot} position={[-10, 0, 0]}>
  //       <torusKnotGeometry args={[2, 0.8, 100, 100 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgLogoCom}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints3} position={[10, 0, 0]}>
  //         <sphereGeometry args={[4, 30, 30]} />
  //         <pointsMaterial color={"#FF7719"} size={0.1} />
  //       </points>

  //       <mesh ref={meshTorus2} position={[0, 0, 0]}>
  //       <torusGeometry args={[2, 1, 100, 100 ]} />
  //       <shaderMaterial
  //             uniforms={uniforms}
  //             fragmentShader={fgSmileyLinePink}
  //             vertexShader={vertexShader}
  //           />
  //       </mesh>

  //       <points ref={meshPoints4} position={[20, 0, 0]}>
  //         <sphereGeometry args={[2, 10, 30]} />
  //         <pointsMaterial color={"#9FFF90"} size={0.1} />
  //       </points>
  //       </group>

  //     </>
  //   );
  // };



  <primitive object={roundedRectShape}/>